'use strict';

var fs = require('fs');
var jsYaml = require('js-yaml');

var yamlUtils = require('./yamlUtils');
var defaultProcessors = require('./processors');

var toArray = function toArray(strOrArray) {
  return [].concat(strOrArray).filter(Boolean);
};

var defaultConfig = {
  processors: defaultProcessors,
  prefix: '',
  format: 'scss'
};

module.exports = function themeBuilder(config) {
  var builderConfig = Object.assign({}, defaultConfig, config);
  var processors = builderConfig.processors,
      prefix = builderConfig.prefix,
      format = builderConfig.format;


  var processor = processors[format];

  if (!processor) {
    throw new Error('Missing processor for "' + format + '" format');
  }

  return {
    merge: function merge(yamlFiles) {
      return yamlUtils.readFiles(yamlFiles).then(yamlUtils.concatYamlData).then(yamlUtils.parseYaml).then(yamlUtils.buildYamlJson).then(yamlUtils.compileJsonToYaml);
    },
    build: function build(yamlFiles) {
      return this.merge(toArray(yamlFiles)).then(function (themeYaml) {
        return processor.compile(jsYaml.safeLoad(themeYaml), prefix);
      });
    },
    watch: function watch(files, callback) {
      var _this = this;

      if (typeof callback !== 'function') {
        throw new Error('callback is required!');
      }

      toArray(files).forEach(function (yamlFile) {
        fs.watchFile(yamlFile, function (curr, prev) {
          console.log('[theme-builder] Detected changes on ' + yamlFile); // eslint-disable-line
          console.log('[theme-builder] rebuilding start'); // eslint-disable-line
          _this.build(files).then(function (content) {
            console.log('[theme-builder] rebuilding end'); // eslint-disable-line
            callback(content, curr, prev);
          });
        });
      });
    }
  };
};