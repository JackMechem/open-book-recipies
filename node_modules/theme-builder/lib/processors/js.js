'use strict';

var template = require('lodash.template');
var helpers = require('../helpers');

function throwDescriptiveError(_ref) {
  var err = _ref.err,
      key = _ref.key,
      value = _ref.value;

  if (err instanceof ReferenceError) {
    throw new Error('Failed to parse value of ' + key + ': \'' + value + '\'. Use double quotes inside interpolated strings');
  }

  throw err;
}

/**
 * Simple check if passed argument is object or array
 *
 * @param {any}
 */
function isObject(obj) {
  return obj === Object(obj);
}

/**
 * Apply transform on primitive values (strings, numbers)
 *
 * @param {Object|Array} value
 * @param {Object} local variables to pass into transformation
 */
function applyTransforms(value, obj) {
  return template(value)(obj);
}

/**
 * This function will walk a object tree and apply transformations on it
 *
 * @param {Object} obj
 * @param {Object} the parent object
 */
function parseExpressions(obj, proto) {
  var parsedObj = Object.assign(Object.create(proto), obj);
  Object.keys(obj).forEach(function (key) {
    var value = obj[key];
    var fn = isObject(value) ? parseExpressions : applyTransforms;
    try {
      parsedObj[key] = fn(value, parsedObj);
    } catch (err) {
      throwDescriptiveError({ err: err, key: key, value: value });
    }
  });

  return parsedObj;
}

var JsProcessor = {
  compile: function compile(obj) {
    return parseExpressions(obj, helpers);
  }
};

module.exports = JsProcessor;