'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

/* eslint no-console: ["error", { allow: ["warn", "error"] }] */
var lodashMerge = require('lodash.merge');
var yamlParser = require('yaml-ast-parser');
var util = require('util');
var fs = require('fs');

function compileJsonToYaml(yamlJson) {
  return yamlParser.dump(lodashMerge.apply(undefined, _toConsumableArray(yamlJson))).replace(/'/g, '');
}

function concatYamlData(files) {
  return files.map(function (file) {
    return '- ' + file.split('\n').join('\n  ');
  }).join('\n');
}

function getASTValue(obj) {
  var curr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if (obj.mappings) {
    obj.mappings.forEach(function (_ref) {
      var key = _ref.key,
          value = _ref.value;

      if (!value.mappings || !value.mappings.length) {
        if (value.referencesAnchor) {
          curr[key.value] = '*' + value.referencesAnchor;
          return;
        }
        if (value.anchorId) {
          curr[key.value] = '&' + value.anchorId + ' ' + value.rawValue;
          return;
        }
        curr[key.value] = value.rawValue;
      } else {
        curr[key.value] = getASTValue(value, {});
      }
    });
  }

  return curr;
}

function buildYamlJson(ast) {
  if (ast.errors && ast.errors.length) {
    ast.errors.forEach(function (err) {
      return console.error(util.inspect(err.reason, undefined, undefined, true));
    });
    throw new Error('There are some errors in AST, please contact developer');
  }

  return ast.items ? ast.items.map(function (astItem) {
    return getASTValue(astItem);
  }) : [getASTValue(ast, {})];
}

function readFiles(paths) {
  return Promise.resolve(paths.map(function (themePath) {
    return fs.readFileSync(themePath, 'utf-8');
  }).filter(Boolean));
}

function parseYaml(content) {
  return yamlParser.safeLoad(content);
}

module.exports = {
  buildYamlJson: buildYamlJson,
  compileJsonToYaml: compileJsonToYaml,
  concatYamlData: concatYamlData,
  parseYaml: parseYaml,
  readFiles: readFiles
};